Index,Title,Abstract,Year,PDF Link,Authors,Source,Predict,Relevant,Objective,Method,Result
0,A Conceptual Model of ICT-Supported Unified Process of International Outsourcing of Software Production,"This is an ongoing research in international outsourcing software production. This research examines how Software production through the ICTsupported unified process of international outsourcing could be executed and managed effectively. To address this research question, the results of an in-depth literature review in the areas of outsourcing, international outsourcing, information technology, and international software production is presented. This study proposes the information communication technologies' (ICT) - supported unified process model of international outsourcing of software production (SUPMIOSP). ICT-SUPMIOSP provides a detailed guideline on how to manage the entire process of international outsourcing by integrating a number of key issues such as relationship and risks management. Both theoretical and practical aspects of ICTSUPMIOSP are presented. At the theoretical level, the model can be used as a basis for further research, while at the practical level, it helps managers and other stakeholders to understand the multiple activities involved in offshore outsourcing, improve, systematize, and execute the ICT-SUPIOSP more effectively and efficiently.",2006,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4031306,Anicet Yalaho,"EDOCW '06: Proceedings of the 10th IEEE on International Enterprise Distributed Object Computing Conference Workshops , October 2006, Publisher: IEEE Computer Society",1,1,This study proposes the information communication technologies' (ICT) - supported unified process model of international outsourcing of software production (SUPMIOSP).,"At the theoretical level, the model can be used as a basis for further research, while at the practical level, it helps managers and other stakeholders to understand the multiple activities involved in offshore outsourcing, improve, systematize, and execute the ICT-SUPIOSP more effectively and efficiently.","To address this research question, the results of an in-depth literature review in the areas of outsourcing, international outsourcing, information technology, and international software production is presented."
1,A Quantitative Assessment of Requirements Engineering Publications ? 1963?2006,"<p>Requirements engineering research has been conducted for over 40 years. It is important to recognize the plethora of results accumulated to date to: (a) improve researchers' understanding of the historical roots of our field in the real-world and the problems that they are trying to solve, (b) expose researchers to the breadth and depth of solutions that have been proposed, (c) provide a synergistic basis for improving those solutions or building new ones to solve real-world problems facing the industry today, and d) increase practitioner awareness of available solutions. A detailed meta-analysis of the requirements engineering literature will provide an objective overview of the advances and current state of the discipline. This paper represents the first step in a planned multi-year analysis. It presents the results of a demographic analysis by date, type, outlet, author, and author affiliation for an existing database of over 4,000 requirements engineering publications.</p>",2007,http://dl.acm.org/citation.cfm?id=1768914&CFID=932216837&CFTOKEN=18963453,"Alan Davis  , Ann Hickey  , Oscar Dieste  , Natalia Juristo   and Ana Moreno","Book Series Lecture Notes in Computer Science, Volume 4542/2007, Book Requirements Engineering: Foundation for Software Quality, Pages 129-143, SpringerLink Date Thursday, June 28, 2007",1,1,"It is important to recognize the plethora of results accumulated to date to: (a) improve researchers' understanding of the historical roots of our field in the real-world and the problems that they are trying to solve, (b) expose researchers to the breadth and depth of solutions that have been proposed, (c) provide a synergistic basis for improving those solutions or building new ones to solve real-world problems facing the industry today, and d) increase practitioner awareness of available solutions.",nan,"It is important to recognize the plethora of results accumulated to date to: (a) improve researchers' understanding of the historical roots of our field in the real-world and the problems that they are trying to solve, (b) expose researchers to the breadth and depth of solutions that have been proposed, (c) provide a synergistic basis for improving those solutions or building new ones to solve real-world problems facing the industry today, and d) increase practitioner awareness of available solutions."
2,A survey and taxonomy of approaches for mining software repositories in the context of software evolution,"<p>A comprehensive literature survey on approaches for mining software repositories (MSR) in the context of software evolution is presented. In particular, this survey deals with those investigations that examine multiple versions of software artifacts or other temporal information. A taxonomy is derived from the analysis of this literature and presents the work via four dimensions: the type of software repositories mined (what), the purpose (why), the adopted/invented methodology used (how), and the evaluation method (quality). The taxonomy is demonstrated to be expressive (i.e., capable of representing a wide spectrum of MSR investigations) and effective (i.e., facilitates similarities and comparisons of MSR investigations). Lastly, a number of open research issues in MSR that require further investigation are identified.</p>",2007,http://dl.acm.org/citation.cfm?id=1345057&CFID=932209910&CFTOKEN=86972045,"Huzefa Kagdi, Michael L. Collard, Jonathan I. Maletic","Journal of Software Maintenance and Evolution: Research and Practice,   Volume 19 Issue 2, March 2007, Publisher: John Wiley & Sons, Inc.",1,1,"A taxonomy is derived from the analysis of this literature and presents the work via four dimensions: the type of software repositories mined (what), the purpose (why), the adopted/invented methodology used (how), and the evaluation method (quality).",<p>A comprehensive literature survey on approaches for mining software repositories (MSR) in the context of software evolution is presented.,nan
4,Challenges in Collaborative Modeling: A Literature Review,"Modeling is a key activity in conceptual design and system design. Users as well as stakeholders, experts and entrepreneurs need to be able to create shared understanding about a system representation. In this paper we conducted a literature review to provide an overview of studies in which collaborative modeling efforts have been conducted to give first insights in the challenges of collaborative modeling, specifically with respect to group composition, collaboration & participation methods, modeling methods and quality in collaborative modeling. We found a critical challenge in dealing with the lack of modeling skills, such as having a modeler to support the group, or create the model for the group versus training to empower participants to actively participate in the modeling effort, and another critical challenge in resolving conflicting (parts of) models and integration of submodels or models from different perspectives. The overview of challenges presented in this paper will inspire the design of methods and support systems that will ultimately advance the efficiency and effectiveness of collaborative modeling tasks.",2014,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6846871,"Michiel Renger, Gwendolyn L. Kolfschoten   and Gert-Jan de Vreede","Book Series Lecture Notes in Business Information Processing, Volume 10, Book Advances in Enterprise Engineering I, Pages 61-77, SpringerLink Date Tuesday, June 10, 2008",1,1,nan,"In this paper we conducted a literature review to provide an overview of studies in which collaborative modeling efforts have been conducted to give first insights in the challenges of collaborative modeling, specifically with respect to group composition, collaboration & participation methods, modeling methods and quality in collaborative modeling.",nan
5,Controversy Corner: A new research agenda for tool integration,"This article highlights tool integration within software engineering environments. Tool integration concerns the techniques used to form coalitions of tools that provide an environment supporting some, or all, activities within a software engineering process. These techniques have been used to create environments that attempt to address aspects of software development, with varying success. This article provides a timely analysis and review of many of the significant projects in the field and, combined with evidence collected from industry, concludes by proposing an empirical manifesto for future research, where we see the need for work to justify tool integration efforts in terms of relevant socio-economic indicators.",2007,http://dl.acm.org/citation.cfm?id=1282981&CFID=932224415&CFTOKEN=87204745,"M. N. Wicks, R. G. Dewar","Journal of Systems and Software,   Volume 80 Issue 9 , September 2007 , Publisher: Elsevier Science Inc.",1,1,"This article provides a timely analysis and review of many of the significant projects in the field and, combined with evidence collected from industry, concludes by proposing an empirical manifesto for future research, where we see the need for work to justify tool integration efforts in terms of relevant socio-economic indicators.","Tool integration concerns the techniques used to form coalitions of tools that provide an environment supporting some, or all, activities within a software engineering process.",nan
7,Developing Open Source Software: A Community-Based Analysis of Research,"Open source software (OSS) creates the potential for the inclusion of large and diverse communities in every aspect of the software development and consumption life cycle. However, despite 6 years of effort by an ever growing research community, we still donÃÂt know exactly what we do and donÃÂt know about OSS, nor do we have a clear idea about the basis for our knowledge. This paper presents an analysis of 155 research artefacts in the area of open source software. The purpose of the study is to identify the kinds of open source project communities that have been researched, the kinds of research questions that have been asked, and the methodologies used by researchers. Emerging from the study is a clearer understanding of what we do and donÃÂt know about open source software, and recommendations for future research efforts ",2015,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7449480,"Joseph Feller, Patrick Finnegan, David Kelly and Maurice MacNamara","Book Series IFIP International Federation for Information Processing, Volume 208/2006, Book Social Inclusion: Societal and Organizational Implications for Information Systems, Pages 261-278, SpringerLink Date Wednesday, September 13, 2006",1,1,"The purpose of the study is to identify the kinds of open source project communities that have been researched, the kinds of research questions that have been asked, and the methodologies used by researchers.","The purpose of the study is to identify the kinds of open source project communities that have been researched, the kinds of research questions that have been asked, and the methodologies used by researchers.",nan
13,In search of `architectural knowledge',"The software architecture community puts more and more emphasis on 'architectural knowledge'. However, there appears to be no commonly accepted definition of what architectural knowledge entails, which makes it a fuzzy concept. In order to obtain a better understanding of how different authors view 'architectural knowledge', we have conducted a systematic review to examine how architectural knowledge is defined and how the different definitions in use are related. From this review it became clear that many authors do not provide a concrete definition of what they think architectural knowledge entails. What is more intriguing, though, is that those who do give a definition seem to agree that architectural knowledge spans from problem domain through decision making to solution; an agreement that is not obvious from the definitions themselves, but which is only brought to light after careful systematic comparison of the different studies.",2010,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5659173,"Remco C. de Boer, Rik Farenhorst","SHARK '08: Proceedings of the 3rd international workshop on Sharing and reusing architectural knowledge, May 2008 , Publisher: ACM",1,1,nan,"In order to obtain a better understanding of how different authors view 'architectural knowledge', we have conducted a systematic review to examine how architectural knowledge is defined and how the different definitions in use are related.",nan
14,Measurement in software engineering: From the roadmap to the crossroads.,"Research on software measurement can be organized around five key conceptual and methodological issues: how to apply measurement theory to software, how to frame software metrics, how to develop metrics, how to collect core measures, and how to analyze measures. The subject is of special concern for the industry, which is interested in improving practices - mainly in developing countries, where the software industry represents an opportunity for growth and usually receives institutional support for matching international quality standards. Academics are also in need of understanding and developing more effective methods for managing the software process and assessing the success of products and services, as a result of an enhanced awareness about the emergency of aligning business processes and information systems. This paper unveils the fundamentals of measurement in software engineering and discusses current issues and foreseeable trends for the subject. A literature review was performed within major academic publications in the last decade, and findings suggest a sensible shift of measurement interests towards managing the software process as a whole - without losing from sight the customary focus on hard issues like algorithm efficiency and worker productivity",1997,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=585509,"C. G. P. Bellini, R. D. D. Pereira, and J. L. Becker.","International Journal of Software Engineering and Knowledge Engineering 18 (1):37-64, 2008.",1,1,"Research on software measurement can be organized around five key conceptual and methodological issues: how to apply measurement theory to software, how to frame software metrics, how to develop metrics, how to collect core measures, and how to analyze measures.","Academics are also in need of understanding and developing more effective methods for managing the software process and assessing the success of products and services, as a result of an enhanced awareness about the emergency of aligning business processes and information systems.","Academics are also in need of understanding and developing more effective methods for managing the software process and assessing the success of products and services, as a result of an enhanced awareness about the emergency of aligning business processes and information systems."
15,Mobile Systems Development: A Literature Review,"This article reviews 105 representative contributions to the literature on mobile systems development. The contributions are categorized according to a simple conceptual framework. The framework comprises four perspectives: the requirements perspective, the technology perspective, the application perspective, and the business perspective. Our literature review shows that mobile systems development is overlooked in the current debate. From the review, we extend the traditional view on systems development to encompass mobile systems and, based on the identified perspectives, we propose core characteristics for mobile systems. We also extend the traditional focus found in systems development on processes in a development project to encompass the whole of the development company as well as interorganizational linkage between development companies. Finally, we point at research directions emerging from the review that are relevant to the field of mobile systems development.",1989,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=198939,Jens Henrik Hosbond and Peter Axel Nielsen,"Book Series IFIP International Federation for Information Processing, Volume 185/2005, Book Designing Ubiquitous Information Environments: Socio-Technical Issues and Challenges, Pages 215-232, SpringerLink Date Thursday, February 09, 2006",1,1,"From the review, we extend the traditional view on systems development to encompass mobile systems and, based on the identified perspectives, we propose core characteristics for mobile systems.",nan,nan
16,"Quality, productivity and economic benefits of software reuse: a review of industrial studies","<p>Systematic software reuse is proposed to increase productivity and software quality and lead to economic benefits. Reports of successful software reuse programs in industry have been published. However, there has been little effort to organize the evidence systematically and appraise it. This review aims to assess the effects of software reuse in industrial contexts. Journals and major conferences between 1994 and 2005 were searched to find observational studies and experiments conducted in industry, returning eleven papers of observational type. Systematic software reuse is significantly related to lower problem (defect, fault or error) density in five studies and to decreased effort spent on correcting problems in three studies. The review found evidence for significant gains in apparent productivity in three studies. Other significant benefits of software reuse were reported in single studies or the results were inconsistent. Evidence from industry is sparse and combining results was done by vote-counting. Researchers should pay more attention to using comparable metrics, performing longitudinal studies, and explaining the results and impact on industry. For industry, evaluating reuse of COTS or OSS components, integrating reuse activities in software processes, better data collection and evaluating return on investment are major challenges.</p>",2007,http://dl.acm.org/citation.cfm?id=1290919&CFID=932217338&CFTOKEN=19657119,"Parastoo Mohagheghi, Reidar Conradi","Empirical Software Engineering,   Volume 12 Issue 5, October 2007, Empirical Software Engineering,   Volume 12 Issue 5, October 2007, Publisher: Kluwer Academic Publishers",1,1,<p>Systematic software reuse is proposed to increase productivity and software quality and lead to economic benefits.,"Researchers should pay more attention to using comparable metrics, performing longitudinal studies, and explaining the results and impact on industry.",Other significant benefits of software reuse were reported in single studies or the results were inconsistent.
17,Reflections on 10 Years of Software Process Simulation Modeling,"Software process simulation modeling (SPSM) has become an increasingly active research area since its introduction in the late 1980s. Particularly during the last ten years the related research community and the number of publications have been growing. The objective of this research is to provide insights about the evolution of SPSM research during the last 10 years. A systematic literature review was proposed with two subsequent stages to achieve this goal. This paper presents the preliminary results of the first stage of the review that is exclusively focusing on a core set of publication sources. More than 200 relevant publications were analyzed in order to find answers to the research questions, including the purposes and scopes of SPSM, application domains, and predominant research issues. From the analysis the following conclusions could be drawn: (1) Categories for classifying software process simulation models as suggested by the authors of a landmark publication in 1999 should be adjusted and refined to better capture the diversity of published models. (2) Research improving the efficiency of SPSM is gaining importance. (3) Hybrid process simulation models have attracted interest as a possibility to more realistically capture complex real-world software processes. ",2014,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6984090,"He Zhang, Barbara Kitchenham and Dietmar Pfahl","Book Series Lecture Notes in Computer Science, Volume 5007/2008, Book Making Globally Distributed Software Development a Success Story, Pages 345-356, SpringerLink Date Tuesday, May 06, 2008",1,1,The objective of this research is to provide insights about the evolution of SPSM research during the last 10 years.,nan,This paper presents the preliminary results of the first stage of the review that is exclusively focusing on a core set of publication sources.
20,Status of Empirical Research in Software Engineering,"We provide an assessment of the status of empirical software research by analyzing all refereed articles that appeared in the Journal of Empirical Software Engineering from its first issue in January 1996 through June 2006. The journal publishes empirical software research exclusively and it is the only journal to do so. The main findings are: 1. The dominant empirical methods are experiments and case studies. Other methods (correlational studies, meta analysis, surveys, descriptive approaches, ex post facto studies) occur infrequently; long-term studies are missing. About a quarter of the experiments are replications. 2. Professionals are used somewhat more frequently than students as subjects. 3. The dominant topics studied are measurement/metrics and tools/methods/frameworks. Metrics research is dominated by correlational and case studies without any experiments. 4. Important topics are underrepresented or absent, for example: programming languages, model driven development, formal methods, and others. The narrow focus on a few empirically researched topics is in contrast to the broad scope of software research. ",2013,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6618469,Andreas H?fer and Walter F. Tichy,"Book Series Lecture Notes in Computer Science, Volume 4336/2007, Book Empirical Software Engineering Issues. Critical Assessment and Future Directions, Pages 10-19, SpringerLink Date Monday, June 11, 2007",1,1,nan,The dominant empirical methods are experiments and case studies.,nan
22,Systematic review: A systematic review of effect size in software engineering experiments,"An effect size quantifies the effects of an experimental treatment. Conclusions drawn from hypothesis testing results might be erroneous if effect sizes are not judged in addition to statistical significance. This paper reports a systematic review of 92 controlled experiments published in 12 major software engineering journals and conference proceedings in the decade 1993-2002. The review investigates the practice of effect size reporting, summarizes standardized effect sizes detected in the experiments, discusses the results and gives advice for improvements. Standardized and/or unstandardized effect sizes were reported in 29% of the experiments. Interpretations of the effect sizes in terms of practical importance were not discussed beyond references to standard conventions. The standardized effect sizes computed from the reviewed experiments were equal to observations in psychology studies and slightly larger than standard conventions in behavioral science. ",2007,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4052585,"Vigdis By Kampenes, Tore Dyb?, Jo E. Hannay, Dag I. K. Sj?berg","Information and Software Technology,   Volume 49 Issue 11-12, November 2007, Publisher: Butterworth-Heinemann pp. 1073 - 1086",1,1,nan,nan,Conclusions drawn from hypothesis testing results might be erroneous if effect sizes are not judged in addition to statistical significance.
23,Tailoring and Introduction of the Rational Unified Process,RUP is a comprehensive software development process framework that has gained a lot of interest by the industry. One major challenge of taking RUP into use is to tailor it to specific needs and then to introduce it into a development organization. This study presents a review and a systematic assembly of existing studies on the tailoring and introduction of RUP. From a systematic search for study reports on this topic we found that most research is anecdotal and focus on the effects of RUP itself. Only a few number of studies address tailoring and introduction. We have found that tailoring RUP is a considerable challenge by itself and that it must be closely related to existing best practices. We see a tendency of turning from large complete process frameworks towards smaller and more light-weight processes which may impose a smoother transition from process model to process in use. ,2009,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5362562,"Geir Kjetil Hanssen, Finn Olav Bj?rnson and Hans Westerheim","Book Series Lecture Notes in Computer Science, Publisher Springer Berlin / Heidelberg, Volume 4764/2007, Book Software Process Improvement, Pages 7-18, SpringerLink Date Thursday, September 13, 2007",1,1,nan,One major challenge of taking RUP into use is to tailor it to specific needs and then to introduce it into a development organization.,nan
24,Techniques for developing more accessible web applications: a survey towards a process classification,"<p>The Web has become one of the most important communication media, since it is spread all over the world. In order to enable everyone to access this medium, Web accessibility has become an emerging topic, and many techniques have been evolved to support the development of accessible Web content. This paper presents a survey on techniques for Web accessibility and proposes a classification into the processes of ISO/IEC 12207 standard. The survey was carried out applying systematic review principles during the literature review. The results include analysis obtained from the synthesis of 53 studies, selected from an initial set of 844. Although the survey results indicate a growth in research on techniques for design and evaluation of Web applications, they also indicate that several development activities have been poorly addressed by scientific research efforts.</p>",2007,http://dl.acm.org/citation.cfm?id=1297177&CFID=932218671&CFTOKEN=40893134,"Andre Pimenta Freire, Rudinei Goularte, Renata Pontin de Mattos Fortes","SIGDOC '07: Proceedings of the 25th annual ACM international conference on Design of communication , October 2007  , Publisher: ACM",1,1,This paper presents a survey on techniques for Web accessibility and proposes a classification into the processes of ISO/IEC 12207 standard.,nan,"The results include analysis obtained from the synthesis of 53 studies, selected from an initial set of 844.Although the survey results indicate a growth in research on techniques for design and evaluation of Web applications, they also indicate that several development activities have been poorly addressed by scientific research efforts.</p>"
25,The Role of Deliberate Artificial Design Elements in Software Engineering Experiments,"Increased realism in software engineering experiments is often promoted as an important means of increasing generalizability and industrial relevance. In this context, artificiality, e.g., the use of constructed tasks in place of realistic tasks, is seen as a threat. In this paper, we examine the opposite view that deliberately introduced artificial design elements may increase knowledge gain and enhance both generalizability and relevance. In the first part of this paper, we identify and evaluate arguments and examples in favor of and against deliberately introducing artificiality into software engineering experiments. We find that there are good arguments in favor of deliberately introducing artificial design elements to 1) isolate basic mechanisms, 2) establish the existence of phenomena, 3) enable generalization from particularly unfavorable to more favorable conditions (persistence of phenomena), and 4) relate experiments to theory. In the second part of this paper, we summarize a content analysis of articles that report software engineering experiments published over a 10-year period from 1993 to 2002. The analysis reveals a striving for realism and external validity, but little awareness of for what and when various degrees of artificiality and realism are appropriate. Furthermore, much of the focus on realism seems to be based on a narrow understanding of the nature of generalization. We conclude that an increased awareness and deliberation as to when and for what purposes both artificial and realistic design elements are applied is valuable for better knowledge gain and quality in empirical software engineering experiments. We also conclude that time spent on studies that have obvious threats to validity that are due to artificiality might be better spent on studies that investigate research questions for which artificiality is a strength rather than a weakness. However, arguments in favor of artificial design elements should not be used to justify studies - - that are badly designed or that have research questions of low relevance.",2008,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4453833,"By Jo Hannay , Magne J?rgensen","Found in: IEEE Transactions on Software Engineering 
Issue Date:March 2008 , pp. 242-259",1,1,We conclude that an increased awareness and deliberation as to when and for what purposes both artificial and realistic design elements are applied is valuable for better knowledge gain and quality in empirical software engineering experiments.,"In this context, artificiality, e.g., the use of constructed tasks in place of realistic tasks, is seen as a threat.",nan
26,The type of evidence produced by empirical software engineers,"This paper reports on the research published between the years 1997 and 2003 inclusive in the journal of Empirical Software Engineering, drawing on the taxonomy developed by Glass et al. in [3]. We found that the research was somewhat narrow in topic with about half the papers focusing on measurement/metrics, review and inspection; that researchers were almost as interested in formulating as in evaluating; that hypothesis testing and laboratory experiments dominated evaluations; that research was not very likely to focus on people and extremely unlikely to refer to other disciplines. We discuss our findings in the context of making empirical software engineering more relevant to practitioners.",2005,http://dl.acm.org/citation.cfm?id=1083176&CFID=932225534&CFTOKEN=50437810,"Judith Segal, Antony Grinyer, Helen Sharp","REBSE '05: Proceedings of the 2005 workshop on Realising evidence-based software engineering, May 2005, Publisher: ACM, pp. 66-73",1,1,nan,nan,nan
28,Cross versus Within-Company Cost Estimation Studies: A Systematic Review,"The objective of this paper is to determine under what circumstances individual organizations would be able to rely on cross-company-based estimation models. We performed a systematic review of studies that compared predictions from cross-company models with predictions from within-company models based on analysis of project data. Ten papers compared cross-company and within-company estimation models; however, only seven presented independent results. Of those seven, three found that cross-company models were not significantly different from within-company models, and four found that cross-company models were significantly worse than within-company models. Experimental procedures used by the studies differed making it impossible to undertake formal meta-analysis of the results. The main trend distinguishing study results was that studies with small within-company data sets (i.e., $20 projects) that used leave-one-out cross validation all found that the within-company model was significantly different (better) from the cross-company model. The results of this review are inconclusive. It is clear that some organizations would be ill-served by cross-company models whereas others would benefit. Further studies are needed, but they must be independent (i.e., based on different data bases or at least different single company data sets) and should address specific hypotheses concerning the conditions that would favor cross-company or within-company models. In addition, experimenters need to standardize their experimental procedures to enable formal meta-analysis, and recommendations are made in Section 3.",2007,http://ieeexplore.ieee.org/abstract/document/4160970/,"By Barbara A. Kitchenham , Emilia Mendes , Guilherme H. Travassos","Found in: IEEE Transactions on Software Engineering ,Issue Date:May 2007 
pp. 316-329",1,1,The objective of this paper is to determine under what circumstances individual organizations would be able to rely on cross-company-based estimation models.,Experimental procedures used by the studies differed making it impossible to undertake formal meta-analysis of the results.,"Ten papers compared cross-company and within-company estimation models; however, only seven presented independent results."
33,A systematic review of Web engineering research,"Abstract:
This paper uses a systematic literature review as means of investigating the rigor of claims arising from Web engineering research. Rigor is measured using criteria combined from software engineering research. We reviewed 173 papers and results have shown that only 5% would be considered rigorous methodologically. In addition to presenting our results, we also provide suggestions for improvement of Web engineering research based on lessons learnt by the software engineering community.",2005,http://ieeexplore.ieee.org/abstract/document/1541857/,By E. Mendes,"Found in: 2005 International Symposium on Empirical Software Engineering, 2005. 
Issue Date:November 2005 , pp. 10 pp.",1,1,nan,"Abstract:
This paper uses a systematic literature review as means of investigating the rigor of claims arising from Web engineering research.",We reviewed 173 papers and results have shown that only 5% would be considered rigorous methodologically.
34,Are Two Heads Better than One? On the Effectiveness of Pair Programming,"Pair programming is a collaborative approach that makes working in pairs rather than individually the primary work style for code development. Because PP is a radically different approach than many developers are used to, it can be hard to predict the effects when a team switches to PP. Because projects focus on different things, this article concentrates on understanding general aspects related to effectiveness, specifically project duration, effort, and quality. Not unexpectedly, our meta-analysis showed that the question of whether two heads are better than one isn't precise enough to be meaningful. Given the evidence, the best answer is ""it depends"" - on both the programmer's expertise and the complexity of the system and tasks to be solved. Two heads are better than one for achieving correctness on highly complex programming tasks. They might also have a time gain on simpler tasks. Additional studies would be useful. For example, further investigation is clearly needed into the interaction of complexity and programmer experience and how they affect the appropriateness of a PP approach; our current understanding of this phenomenon rests chiefly on a single (although large) study. Only by understanding what makes pairs work and what makes them less efficient can we take steps to provide beneficial work conditions, to avoid detrimental conditions, and to avoid pairing altogether when conditions are detrimental. With the right cooks and the right combination of ingredients, the broth has the potential to be very good indeed.",2007,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4375233,"By Tore Dyb? , Erik Arisholm , Dag I.K. Sj?berg , Jo E. Hannay , Forrest Shull","Found in: IEEE Software 
Issue Date:November 2007 , pp. 12-15",1,1,nan,Pair programming is a collaborative approach that makes working in pairs rather than individually the primary work style for code development.,nan
35,Do SQA Programs Work - CMM Works. A Meta Analysis,"Many software development professionals and managers of software development organizations are not fully convinced in the profitability of investments for the advancement of SQA systems. The results included in each of the articles we found, cannot lead to general conclusions on the impact of investments in upgrading an SQA system. Our meta analysis was based on CMM level transition (CMMLT) analysis of available publications and was for the seven most common performance metric. The CMMLT analysis is applicable for combined analysis of empirical data from many sources. Each record in our meta analysis database is calculated as ""after-before ratio"", which is nearly free of the studied organization's characteristics. Because the CMM guidelines and SQA requirement are similar, we claim that the results for CMM programs are also applicable to investments in SQA systems. The extensive database of over 1,800 projects from a variety of 19 information sources leading to the meta analysis results - proved that investments in CMM programs and similarly in SQA systems contribute to software development performance.",2005,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1421069,"By Daniel Galin , Moti Avrahami","Found in: IEEE International Conference on Software - Science, Technology & Engineering (SwSTE'05) 
Issue Date:February 2005 
pp. 95-100",1,1,nan,nan,"The results included in each of the articles we found, cannot lead to general conclusions on the impact of investments in upgrading an SQA system."
37,"Capture-recapture in software inspections after 10 years research - theory, evaluation and application.","Software inspection is a method to detect faults in the early phases of the software life cycle. In order to estimate the number of faults?not?found, capture?recapture was introduced for software inspections in 1992 to estimate remaining faults after an inspection. Since then, several papers have been written in the area, concerning the basic theory, evaluation of models and application of the method. This paper summarizes the work made in capture?recapture for software inspections during these years. Furthermore, and more importantly, the contribution of the papers are classified as?theory,?evaluation?or?application, in order to analyse the performed research as well as to highlight the areas of research that need further work. It is concluded that (1) most of the basic theory is investigated within biostatistics, (2) most software engineering research is performed on evaluation, a majority ending up in recommendation of the Mh?JK model, and (3) there is a need for application experiences. In order to support the application, an inspection process is presented with decision points based on capture?recapture estimates.",2004,http://www.sciencedirect.com/science/article/pii/S0164121203000906,"H. Petersson, T. Thelin, P. Runeson, and C. Wohlin.","Journal of Systems and Software 72 (2):249-264, 2004.",1,1,nan,Software inspection is a method to detect faults in the early phases of the software life cycle.,nan
39,Software effort estimation terminology: The tower of Babel.,"It is well documented that the software industry suffers from frequent cost overruns. A contributing factor is, we believe, the imprecise estimation terminology in use. A lack of clarity and precision in the use of estimation terms reduces the interpretability of estimation accuracy results, makes the communication of estimates difficult, and lowers the learning possibilities. This paper reports on a structured review of typical software effort estimation terminology in software engineering textbooks and software estimation research papers. The review provides evidence that the term ?effort estimate? is frequently used without sufficient clarification of its meaning, and that estimation accuracy is often evaluated without ensuring that the estimated and the actual effort are comparable. Guidelines are suggested on how to reduce this lack of clarity and precision in terminology.",2006,http://www.sciencedirect.com/science/article/pii/S0950584905000674,"S. Grimstad, M. Jorgensen, and K. Molokken-Ostvold.","Information and Software Technology 48 (4):302-310, 2006.",1,1,nan,"A contributing factor is, we believe, the imprecise estimation terminology in use.","A lack of clarity and precision in the use of estimation terms reduces the interpretability of estimation accuracy results, makes the communication of estimates difficult, and lowers the learning possibilities."
40,In Search of What We Experimentally Know about Unit Testing,"Gathering evidence in any discipline is a lengthy procedure, requiring experimentation and empirical confirmation to transform information from mere opinion to undisputed fact. Software engineering is a relatively young field and experimental SE is even younger, so undisputed facts are few and far between. Nevertheless, ESE's relevance is growing because experimental results can help practitioners make better decisions. We have aggregated results from unit-testing experiments with the aim of identifying information with some experimental basis that might help practitioners make decisions. Most of the experiments focus on two important characteristics of testing techniques: effectiveness and efficiency. Some other experiments study the quality of test-case sets according to different criteria",2006,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4012628,"By Natalia Juristo , Ana M. Moreno , Sira Vegas , Martin Solari","Found in: IEEE Software 
Issue Date:November 2006 
pp. 72-80",1,1,nan,nan,"Nevertheless, ESE's relevance is growing because experimental results can help practitioners make better decisions."
41,Precise Identification of Side-Effect-Free Methods in Java,"Knowing which methods do not have side effects is necessary in a variety of software tools for program understanding, restructuring, optimization, and verification. We present a general approach for identifying side-effect-free methods in Java software. Our technique is parameterized by class analysis and is designed to work on incomplete programs. We present empirical results from two instantiations of the approach, based on rapid type analysis and on points-to analysis. In our experiments with several components, on average 22% of the investigated methods were identified as free of side effects. We also present a precision evaluation which shows that the approach achieves almost perfect precision - i.e., it almost never misses methods that in reality have no side effects. These results indicate that very precise identification of side-effect-free methods is possible with simple and inexpensive analysis techniques, and therefore can be easily incorporated in software tools.",2004,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1357793,By Atanas Rountev,"Found in: 20th IEEE International Conference on Software Maintenance (ICSM'04) 
Issue Date:September 2004 
pp. 82-91",1,1,nan,"Knowing which methods do not have side effects is necessary in a variety of software tools for program understanding, restructuring, optimization, and verification.","We present empirical results from two instantiations of the approach, based on rapid type analysis and on points-to analysis."
